<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>William Lachance's Log: Posts tagged 'Recurse'</title>
  <description>William Lachance's Log: Posts tagged 'Recurse'</description>
  <link>https://wrla.ch/tags/Recurse.html</link>
  <lastBuildDate>Sat, 05 Apr 2025 23:11:12 UT</lastBuildDate>
  <pubDate>Sat, 05 Apr 2025 23:11:12 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Electrification and solar</title>
   <link>https://wrla.ch/blog/2025/04/electrification-and-solar/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2025-04-electrification-and-solar</guid>
   <pubDate>Sat, 05 Apr 2025 23:11:12 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;I did up an &lt;a href="https://evidence.dev"&gt;evidence&lt;/a&gt; dashboard with some (hopefully) data-driven thoughts on the environmental and financial aspects of heat pump and solar technology in the Greater Toronto / Hamilton area:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wlach.github.io/gtha-electrification"&gt;wlach.github.io/gtha-electrification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evidence is pretty neat: very close to what I originally had in mind when building Irydium a few years ago at Mozilla and Recurse (see previous entries in this journal).&lt;/p&gt;</description></item>
  <item>
   <title>90 days out and in</title>
   <link>https://wrla.ch/blog/2022/04/90-days-out-and-in/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2022-04-90-days-out-and-in</guid>
   <pubDate>Sat, 16 Apr 2022 16:44:14 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;The 90 day mark just passed at my &lt;a href="https://voltus.co"&gt;new gig at Voltus&lt;/a&gt;, feels like a good time for a bit of self-reflection.&lt;/p&gt;

&lt;p&gt;In general, I think it&amp;rsquo;s been a good change and that it was the right time to leave Mozilla. Since I left, a few people have asked me why I chose to do so: while the full answer is pretty complicated (these things are never simple!), I think it does ultimately come down to wanting to try something new after 10+ years. I&amp;rsquo;ve accumulated a fair amount of expertise in web development and data engineering and I wanted to see if I could apply them to a new area that I cared about&amp;mdash; in this case, climate change and the energy transition.&lt;/p&gt;

&lt;p&gt;Voltus is a much younger and different company than Mozilla was, and there&amp;rsquo;s no shortage of things to learn and do. Energy markets are a rather interesting technical domain to work in&amp;mdash; a big intersection between politics, technology, and business. Lots of very old and very new things all at once. As a still-relatively young company, there is definitely more of a feeling that it&amp;rsquo;s possible to shape Voltus&amp;rsquo;s culture and practices, which has been interesting. There&amp;rsquo;s a bit of a balancing act between sharing what you&amp;rsquo;ve learned in previous roles while having the humility to recognize that there&amp;rsquo;s much you still don&amp;rsquo;t understand in a new workplace.&lt;/p&gt;

&lt;p&gt;On the downside, I have to admit that I do miss being able to work in the open. &lt;a href="https://www.canarymedia.com/articles/climatetech-finance/voltus-launches-1-3b-spac-to-help-businesses-reshape-their-power-use-and-ease-grid-stress"&gt;Voltus is currently in the process of going public&lt;/a&gt;, which has made me extra shy about saying much of anything about what I&amp;rsquo;ve been working on in a public forum.&lt;/p&gt;

&lt;p&gt;To some extent I&amp;rsquo;ve been scratching this itch by continuing to work on &lt;a href="https://irydium.dev"&gt;Irydium&lt;/a&gt; when I have the chance. I&amp;rsquo;ve done up a few new releases in the last couple of months, which I think have been fairly well received inside my very small community of people doing like-minded things. I&amp;rsquo;m planning on attending (at least part of) a &lt;a href="https://github.com/pyodide/pyodide/wiki/PyCon2022-sprint"&gt;pyodide sprint&lt;/a&gt; in early May, which I think should be a lot of fun as well as an opportunity to push browser-based data science forward.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also kept more of a connection with Mozilla than I thought I would have: some video meetings with former colleagues, answering questions on Element (&lt;a href="https://wiki.mozilla.org/Matrix"&gt;chat.mozilla.org&lt;/a&gt;), even &lt;a href="https://github.com/mozilla/glean-dictionary/pulls?q=is%3Apr+author%3Awlach+is%3Aclosed"&gt;some pull requests&lt;/a&gt; where I felt like I could make a quick contribution. I&amp;rsquo;m still using Firefox, which has actually given me more perspective on some problems that people at Mozilla might not experience (e.g. &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1536777"&gt;this screensharing bug&lt;/a&gt; which you&amp;rsquo;d only see if you&amp;rsquo;re using a WebRTC-based video conferencing solution like Google Meet).&lt;/p&gt;

&lt;p&gt;That said, I&amp;rsquo;m not sure to what extent this will continue: even if the source code to Firefox and the tooling that supports it is technically &amp;ldquo;open source&amp;rdquo;, outsiders like myself really have very limited visibility into what Mozilla is doing these days. This makes it difficult to really connect with much of what&amp;rsquo;s going on or know how I might be able to contribute. While it might be theoretically possible to join Mozilla&amp;rsquo;s Slack (at least last I checked), that feels like a rabbit hole I&amp;rsquo;d prefer not to go down. While I&amp;rsquo;m still interested in supporting Mozilla&amp;rsquo;s mission, I really don&amp;rsquo;t want more than one workplace chat tool in my life: there&amp;rsquo;s a lot of content there that is no longer relevant to me as a non-employee and (being honest) I&amp;rsquo;d rather leave behind. There&amp;rsquo;s lots more I could say about this, but probably best to leave it there: I understand that there&amp;rsquo;s reasons why things are the way they are, even if they make me a little sad.&lt;/p&gt;</description></item>
  <item>
   <title>Learning about Psychological Safety at the Recurse Center</title>
   <link>https://wrla.ch/blog/2021/10/learning-about-psychological-safety-at-the-recurse-center/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2021-10-learning-about-psychological-safety-at-the-recurse-center</guid>
   <pubDate>Tue, 19 Oct 2021 12:34:40 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Last summer, I took a 6-week sabbatical from my job to attend a virtual “programmers retreat” at the &lt;a href="https://recurse.com"&gt;Recurse Center&lt;/a&gt;. I thought I&amp;rsquo;d write up some notes on the experience, with a particular lens towards what makes an environment suited towards learning, innovation, and personal growth.&lt;/p&gt;

&lt;p&gt;Some context: I’m currently working as a software engineer at Mozilla, building out our data pipeline and analysis tooling. I&amp;rsquo;ve been at my current position for more than 10 years (my &amp;ldquo;anniversary&amp;rdquo; actually passed while I was out). I started out as a senior engineer in 2011, and was promoted to staff engineer in 2016. In tech-land, this is a really long tenure at a company. I felt like it was time to take a break from my day-to-day, explore some new ideas and concepts, and hopefully expose myself to a broader group of people in my field.&lt;/p&gt;

&lt;p&gt;My original thinking was that I would mostly be spending this time building out an interactive computation environment I&amp;rsquo;ve been working on called &lt;a href="https://irydium.dev"&gt;Irydium&lt;/a&gt;. And I did quite a bit of that. However, I think the main thing I took away from this experience was some insight on what makes a remote environment for knowledge work really “click”. In particular, what makes somewhere feel psychologically safe, and how this feeling allows us to innovate and do our best work.&lt;/p&gt;

&lt;p&gt;While the Recurse Center obviously has different goals than an organization that builds and delivers consumer software, I do think there are some things that it does that could be applied to Mozilla (and, likely, many other tech workplaces).&lt;/p&gt;

&lt;h2 id="what-is-the-recurse-center"&gt;What is the Recurse Center?&lt;/h2&gt;

&lt;p&gt;Most succinctly, the Recurse Center is a &amp;ldquo;writer&amp;rsquo;s retreat for programmers&amp;rdquo;. It tries to provide an environment conducive to learning and creativity, an opportunity to refine your craft and learn new things, both from the act of programming itself &lt;em&gt;and&lt;/em&gt; from interactions with the other like-minded people attending. The Recurse Center admits a wide variety of people, from those who have only been through a coding bootcamp to those who have been in the industry many years, like myself. The main admission criteria, from what I gather, are curiosity and friendliness.&lt;/p&gt;

&lt;p&gt;Once admitted, you do a &amp;ldquo;batch&amp;rdquo;&amp;mdash; either a mini (1 week), half-batch (6 weeks), or a full batch (12 weeks). I did a half-batch.&lt;/p&gt;

&lt;h2 id="how-does-it-work-during-a-global-pandemic"&gt;How does it work (during a global pandemic)?&lt;/h2&gt;

&lt;p&gt;The Recurse experience used to be entirely in-person, in a space in New York City - if you wanted to go, you needed to move there at least temporarily. Obviously that&amp;rsquo;s out the window during a Global Pandemic, and all activities are currently happening online. This was actually pretty ideal for me at this point in my life, as it allowed me to participate entirely remotely from my home in Hamilton, Ontario, Canada (near Toronto).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a few elements that make &amp;ldquo;Virtual RC&amp;rdquo; tick:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;A virtual space (pictured below) where you can see other people in your cohort. This is particularly useful when you want to jump into a conference room.&lt;/li&gt;
 &lt;li&gt;A shared &amp;ldquo;calendar&amp;rdquo; where people can schedule events, either adhoc (e.g. a one off social event, discussing a paper) or on a regular basis (e.g. a reading group)&lt;/li&gt;
 &lt;li&gt;A zulip chat server (which is a bit like Slack) for adhoc conversation with people in your cohort and alumni. There are multiple channels, covering a broad spectrum of interests.&lt;/li&gt;&lt;/ul&gt;

&lt;div class="figure"&gt;&lt;img src="/files/2021/10/virtual_RC.png" alt="" /&gt;
 &lt;p class="caption"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;h2 id="why-does-it-work"&gt;Why does it work?&lt;/h2&gt;

&lt;p&gt;So far, what I&amp;rsquo;ve described probably sounds a lot like any remote tech workplace during the pandemic&amp;hellip; and it sort of is! In some ways, my schedule and life while at Recurse didn&amp;rsquo;t feel all that different from my normal day-to-day. Wake up in the morning, drink coffee, meditate, work for roughly 8 hours, done. Qualitatively, however, my experience at Recurse felt unusually productive, and I learned a lot more than I expected to: not just the core stuff related to Irydium, but also unexpected new concepts like CRDTs, product design, and even &lt;a href="https://github.com/microsoft/vscode-textmate/issues/152"&gt;how visual studio code syntax highlighting works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What made the difference? Certainly, not having the normal pressures of a workplace helps - but I think there&amp;rsquo;s more to it than that. The way RC is constructed reinforces a sense of &lt;em&gt;psychological safety&lt;/em&gt; which I think is key to learning and growth.&lt;/p&gt;

&lt;h2 id="what-is-psychological-safety-and-why-should-i-care"&gt;What is psychological safety and why should I care?&lt;/h2&gt;

&lt;p&gt;Psychological safety is a bit of a hot topic these days and there&amp;rsquo;s a lot of discussion about in management circles. I think it comes down to a feeling that you can take risks and &amp;ldquo;put yourself out there&amp;rdquo; without fear that you&amp;rsquo;ll be ignored, attacked, or ridiculed.&lt;/p&gt;

&lt;p&gt;Why is this important? I would argue, because knowledge work is about building understanding &amp;mdash; going from a place of not understanding to understanding. If you’re working on anything at all innovative, there is always an element of the unknown. In my experience, there is virtually always a sense of discomfort and uncertainty that goes along with that. This goes double when you&amp;rsquo;re working around and with people that you don&amp;rsquo;t know terribly well (and who might have far more experience than you). Are they going to make fun of you for not knowing a basic concept or for expressing an idea that&amp;rsquo;s &amp;ldquo;so wrong I don’t even know where to begin&amp;rdquo;? Or, just as bad, will you not get any feedback on your work at all?&lt;/p&gt;

&lt;p&gt;In reality, except in truly toxic environments, you&amp;rsquo;ll rarely encounter outright abusive behaviour. But the isolation of remote work can breed similar feelings of disquiet and discomfort over time. My sense, after a year of working &amp;ldquo;hardcore&amp;rdquo; remote in COVID times, is that our normal workplace rituals of meetings, “stand ups”, and discussions over Slack don&amp;rsquo;t provide enough space for a meaningful sense of psychological safety to develop. They’re good enough for measuring progress towards agreed-upon goals but a true sense of belonging depends on less tightly scripted interactions among peers.&lt;/p&gt;

&lt;h2 id="how-the-recurse-environment-creates-psychological-safety"&gt;How the Recurse environment creates psychological safety&lt;/h2&gt;

&lt;p&gt;But the environment I described above isn&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; different from a workplace, is it? Speaking from my own experience, my coworkers at Mozilla are all pretty nice people. There’s also many channels for informal discussion at Mozilla, and of course direct messaging is always available (via Slack or Matrix). And yet, I still feel there is a pretty large gap between the two experiences. So what makes the difference? I&amp;rsquo;d say there were three important aspects of Recurse that really helped here: social rules, gentle prompts, and a closed space.&lt;/p&gt;

&lt;h3 id="social-rules"&gt;Social rules&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s been a lot of discussion about community participation guidelines and standards of behaviour in workplaces. In general, these types of policies target really egregious behaviour like harassment: this is a pretty low bar. They aren&amp;rsquo;t, in my experience, sufficient to actually create an environment that actually feels safe.&lt;/p&gt;

&lt;p&gt;The Recurse Center goes over and above a basic code of conduct, with four simple social rules:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;No well-actually’s: corrections that aren’t relevant to the point someone was trying to make (this is probably the rule we’re most heavily conditioned to break).&lt;/li&gt;
 &lt;li&gt;No feigned surprise: acting surprised when someone doesn’t know something.&lt;/li&gt;
 &lt;li&gt;No backseat driving: lobbing advice from across the room (or across the online chat) without really joining or engaging in a conversation.&lt;/li&gt;
 &lt;li&gt;No subtle -isms: subtle expressions of racism, sexism, ageism, homophobia, transphobia and other kinds of bias and prejudice.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;These rules aren&amp;rsquo;t &amp;ldquo;commandments&amp;rdquo; and you&amp;rsquo;re not meant to feel shame for violating them. The important thing is that by being there, the rules create an &lt;em&gt;environment conducive to learning and growth&lt;/em&gt;. You can be reasonably confident that you can bring up a question or discussion point (or respond to one) and it won&amp;rsquo;t lead to a bad outcome. For example, you can expect not to be made fun of for asking what a UNIX socket is (and if you are, you can tell the person doing so to stop). Rather than there being an unspoken rule that everyone should already know everything about what they are trying to do, there is a spoken rule that states it’s expected that they don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Working on Irydium, there&amp;rsquo;s an infinite number of ways I can feel incompetent: this is a requirement when engaging with concepts that I still don&amp;rsquo;t feel completely comfortable with: parsers, compilers, WebAssembly&amp;hellip; the list goes on. Knowing that I could talk about what I&amp;rsquo;m working on (or something I&amp;rsquo;m interested in) and that the responses I got would be constructive and directed to the project, not the person made all the difference.&lt;sup&gt;&lt;a href="#2021-10-19-learning-about-psychological-safety-at-the-recurse-centre-footnote-1-definition" name="2021-10-19-learning-about-psychological-safety-at-the-recurse-centre-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id="gentle-prompts"&gt;Gentle prompts&lt;/h3&gt;

&lt;p&gt;The thing I loved the most about Recurse were the gentle prompts to engage with other people, talk about your work, and get help. A few that I really enjoyed during my time there:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;The &amp;ldquo;checkins&amp;rdquo; channel. People would post what&amp;rsquo;s going on with their time at RC, their challenges, their struggles. Often there would be little snippits about people&amp;rsquo;s lives in there, which built to a feeling of community.&lt;/li&gt;
 &lt;li&gt;Hack &amp;amp; Tell: A weekly event where a group of us would get together in a Zoom room, talk about working on or building something, then rejoin the chat an hour later to show off what we accomplished.&lt;/li&gt;
 &lt;li&gt;Coffee Chats: A &amp;ldquo;coffee chat&amp;rdquo; bot at RC would pair you with other people in your batch (or alumni) on a cadence of your choosing. I met so many great people this way!&lt;/li&gt;
 &lt;li&gt;Weekly Presentations: At the end of each week, people would sign up to share something that they were working on our learned.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;… and I could go on. What&amp;rsquo;s important are not the specific activities, but their end effect of building connectedness, creating opportunities for serendipitous collaboration and interaction (more than one discussion group came out of someone&amp;rsquo;s checkin post on Zulip) and generally creating an environment well-suited to learning.&lt;/p&gt;

&lt;h3 id="a-semi-closed-space"&gt;A (semi) closed space&lt;/h3&gt;

&lt;p&gt;One of the things that makes the gentle prompts above &amp;ldquo;work&amp;rdquo; is that you have some idea of who you&amp;rsquo;re going to be interacting with. Having some predictability about who&amp;rsquo;s going to see what you post and engage with you (that they were vetted by RC&amp;rsquo;s interview process and are committed to the above-mentioned social rules) gives you some confidence to be vulnerable and share things that you might be reluctant to otherwise.&lt;/p&gt;

&lt;p&gt;Those who have known me for a while will probably see the above as being a bit of departure from what I normally preach: throughout my tenure at Mozilla, I’ve constantly pushed the people I’ve worked with to do more work in public. In the case of a product like Firefox, which touches so many people, I think open and transparent practices are absolutely essential to building trust, creating opportunity, and ensuring that our software reflects a diversity of views. I applied the same philosophy to Irydium’s development while I was at the Recurse Center: I set up a public Matrix channel to discuss the project, published all my work on GitHub, and was quite chatty about what I was working on, both in this blog and on Twitter.&lt;/p&gt;

&lt;p&gt;The key, I think, is being deliberate about what approach you take when: there is a place for both public and private conversations about what we work on. I’m strongly in favour of open design documents, community calls, public bug trackers and open source in general. But I think it’s also pretty ok to have smaller spaces for learning, personal development, and question asking. I know I strongly appreciated having a smaller group of people that I could talk to about ideas that were not yet fully formed: you can always bring them out into the open later. The psychological risk of working in public can be mitigated by the psychological safety that can be developed within an intentional community.&lt;/p&gt;

&lt;h2 id="bringing-it-back"&gt;Bringing it back&lt;/h2&gt;

&lt;p&gt;Returning to my job, I wondered if it might be possible to bring some of what I described above back to Mozilla? Obviously not everything would be directly transferable: Mozilla has its own mission and goals, and there are pressures that exist in a workplace that do not exist in an environment purely directed at learning. Still, I suspected that there was something we could do here. And that it would be worth doing, not just to improve the felt experience of the people here (though that would be reason enough) but also to get more feedback on our work and create more opportunities for collaboration and innovation.&lt;/p&gt;

&lt;p&gt;I felt like trying to do something inside our particular organization (Data Engineering and Data Science) would be the most tractable initial step. I talked a bit about my experience with &lt;a href="https://bluesock.org/~willkg/"&gt;Will Kahn-Green&lt;/a&gt; (who has been at Mozilla around the same length of time as I have) and we came up with what we called the “Data Neighbourhood” project: a set of grassroots micro-initiatives to increase our connectedness as a group. As an organization directed primarily at serving other parts of Mozilla, most of our team’s communication is directed outward. It’s often hard to know what everyone else is up to, where they’re struggling, and how we could help each other out. Attacking that problem directly seemed like the best place to start.&lt;/p&gt;

&lt;p&gt;The first experiment we tried was a “data checkins” channel on Slack, a place for people to talk informally about their work (or life!). I explicitly set it up with a similar set of social rules as outlined above and tried to emphasize that it was a place to talk about how things are going, rather than a place to report status to your manager. After a somewhat slow start (the initial posts were from Will, myself, and a few other people from Data Engineering who had been around for a long time) we’re beginning to see engagement from others, including some newer people I hadn’t interacted with much before. There’s also been a few useful threads of conversations across different sub-teams (for example, a discussion on how we identify distinct versions of Firefox for iOS) that likely would not have happened without the channel.&lt;/p&gt;

&lt;p&gt;Since then, others have tried a few other things in the same vein (an adhoc coffee chat pairing bot, a “writing help” channel) and there are some signs of success. There’s clearly an appetite for new and better ways for us to relate to each other about the work we’re doing, and I’m excited to see how these ideas evolve over time.&lt;/p&gt;

&lt;p&gt;I suspect there are limits to how psychologically safe a workplace can ever feel (and some of that is probably outside of any individual’s control). There are dynamics in a workplace which make applying some of Recurse’s practices difficult. In particular, a posture of “not knowing things is o.k.” may not apply perfectly to a workplace where people are hired (and promoted) based on perceived competence and expertise. Still, I think it’s worth investigating what might be possible within the constraints of the system we’re in. There are big potential benefits, for our creative output and our well-being.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Many thanks to Jenny Zhang, Kathleen Beckett, Joe Trellick, Taylor Phebillo and Vaibhav Sagar, and Will Kahn-Greene for reviewing earlier drafts of this post&lt;/em&gt;&lt;/p&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2021-10-19-learning-about-psychological-safety-at-the-recurse-centre-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;This is generally considered best practice inside workplaces as well. For example, see &lt;a href="https://google.github.io/eng-practices/review/reviewer/comments.html"&gt;Google’s guide on how to write code review comments&lt;/a&gt;.&amp;nbsp;&lt;a href="#2021-10-19-learning-about-psychological-safety-at-the-recurse-centre-footnote-1-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description></item>
  <item>
   <title>Lightweight dashboards and reports with Irydium and surge.sh</title>
   <link>https://wrla.ch/blog/2021/08/lightweight-dashboards-and-reports-with-irydium-and-surge-sh/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2021-08-lightweight-dashboards-and-reports-with-irydium-and-surge-sh</guid>
   <pubDate>Tue, 03 Aug 2021 15:37:35 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;One of my main goals with &lt;a href="https://irydium.dev"&gt;Irydium&lt;/a&gt; is to allow it to be a part of as many data science and engineering workflows as possible (including ones I haven&amp;rsquo;t thought of). Yes, like &lt;a href="https://alpha.iodide.io"&gt;Iodide&lt;/a&gt; and other products, I am (slowly) building a web-based interface for building and sharing dashboards, reports, and similar things. However, I also want to fully support local and command-line based workflows. Beyond the obvious utility of being able to use your favorite text-editor to create documents, this also opens up the possibility of combining Irydium with other tools and workflows. For a slightly longer exposition on why this is desirable, I would highly recommend reading Ryan Harter&amp;rsquo;s post on the subject: &lt;a href="https://blog.harterrt.com/coding_in_textboxes.html"&gt;Don&amp;rsquo;t make me code in your text box&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="using-the-irydium-template"&gt;Using the irydium template&lt;/h2&gt;

&lt;p&gt;To make getting started easier, I just created an &lt;a href="https://github.com/irydium/irydium-template"&gt;irydium-template&lt;/a&gt;: a simple GitHub repository which contains a minimal markdown document (a &lt;a href="https://www.economist.com/big-mac-index"&gt;big mac index&lt;/a&gt; visualization) which you can use as a base, as well as a bit of npm scaffolding to get you up and running quickly. To check it out via the console, I recommend using &lt;a href="https://github.com/Rich-Harris/degit"&gt;degit&lt;/a&gt; (the tool of choice for such things in the Svelte community):&lt;/p&gt;

&lt;div class="brush: bash"&gt;
 &lt;div class="colorful"&gt;
  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;npx degit git@github.com:irydium/irydium-template.git my-notebook
npm install
npm run dev
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;This will create a webserver which renders the document (index.md) at port 3000, along with some debugging options. As you edit and save the document, the site should update automatically.&lt;/p&gt;

&lt;h2 id="publishing-your-work"&gt;Publishing your work&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;re happy with the results, you can create a static version of the site (an &lt;code&gt;index.html&lt;/code&gt; file) by running &lt;code&gt;npm run build&lt;/code&gt;. You can publish this via whatever you like: GitHub pages, Netlify / Vercel or&amp;hellip; my new favorite service, &lt;a href="https://surge.sh"&gt;surge.sh&lt;/a&gt;. Surge provides a really simple hosting service for hosting static sites and works great with Irydium. Installing &lt;em&gt;and&lt;/em&gt; running it locally is two commands:&lt;/p&gt;

&lt;div class="brush: bash"&gt;
 &lt;div class="colorful"&gt;
  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install -g surge
surge
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;Surge will prompt you for an email and a password, then will automatically publish your site at a unique URL. As an example, I published a site for the above template: &lt;a href="https://few-blade.surge.sh"&gt;few-blade.surge.sh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interested in chatting more about this? Feel free to reach out on the &lt;a href="https://gitter.im/irydium/community"&gt;Irydium Gitter chat&lt;/a&gt;.&lt;/p&gt;</description></item>
  <item>
   <title>Irydium @ Recurse Updates</title>
   <link>https://wrla.ch/blog/2021/07/irydium-recurse-updates/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2021-07-irydium-recurse-updates</guid>
   <pubDate>Wed, 28 Jul 2021 19:16:42 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Some quick updates on where &lt;a href="https://irydium.dev"&gt;Irydium&lt;/a&gt; is at, roughly a week-and-a-half before my mini-sabbatical at the &lt;a href="https://recurse.com"&gt;Recurse Centre&lt;/a&gt; ends.&lt;/p&gt;

&lt;h2 id="jupyterbook-and-myst"&gt;JupyterBook and MyST&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;d been admiring &lt;a href="https://jupyterbook.org"&gt;JupyterBook&lt;/a&gt; from afar for some time: their project philosophy appealed to me greatly. In particular, the &lt;a href="https://myst-parser.readthedocs.io/"&gt;MyST extensions&lt;/a&gt; to markdown seemed like a natural fit for this project and a natural point of collaboration and cross-pollination. A couple of weeks ago, I finally got in touch with some people working on that project, which prompted a few small efforts:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://github.com/executablebooks/myst-vs-code/pull/32"&gt;Adding Svelte support to VSCode&amp;rsquo;s MyST Plugin&lt;/a&gt;, which in turn prompted me to figure out &lt;a href="https://github.com/sveltejs/language-tools/issues/1094"&gt;why the VSCode plugin for Svelte doesn&amp;rsquo;t render inline content correctly&lt;/a&gt; (tl;dr: probably a bug in VSCode?)&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://irydium.dev/examples#myst-directives"&gt;Adding support for a couple of MyST&amp;rsquo;s built-in directives&lt;/a&gt; (&amp;ldquo;warning&amp;rdquo; and &amp;ldquo;note&amp;rdquo;).&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://irydium.dev/examples#myst-directives"&gt;&lt;img src="https://i.imgur.com/A24e302.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve become convinced that building on top of MyST is right for both Irydium and the larger community. Increasing Irydium&amp;rsquo;s support for MyST is tracked in &lt;a href="https://github.com/irydium/irydium/issues/123"&gt;irydium/irydium#123&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="using-irydium-to-build-irydium"&gt;Using Irydium to build Irydium&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been spending a fair bit of time thinking of how to ma ke it easier for people to build Irydium documents through &lt;em&gt;composition&lt;/em&gt; of existing documents. Landed the first pieces of this. The first is the ability to &amp;ldquo;import&amp;rdquo; a code chunk from another irydium document. There&amp;rsquo;s a few examples of this in the new &lt;a href="https://irydium.dev/components"&gt;components section&lt;/a&gt; of irydium.dev:&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="https://i.imgur.com/y4qNTj6.png" alt="" /&gt;
 &lt;p class="caption"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;In a sense this allows you to define a reusable piece of code along with both documentation and usage examples. I think this concept will be particularly useful for supporting language plugins (which I will write about in an upcoming post).&lt;/p&gt;

&lt;h2 id="its-a-real-project-now"&gt;It&amp;rsquo;s a real project now&lt;/h2&gt;

&lt;p&gt;I spent a bit of time last week doing some community gardening. I still consider Irydium an &amp;ldquo;experiment&amp;rdquo; but I&amp;rsquo;d like to at least open up the possibility of it being something larger. To help make that happen, I started working on some basic project governance pieces, namely:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;We have a &lt;a href="https://github.com/irydium/irydium/blob/main/CODE_OF_CONDUCT.md"&gt;code of conduct&lt;/a&gt; and &lt;a href="https://github.com/irydium/irydium/blob/main/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;. I opted to go for the Contributor Covenant, which seems to be a good minimal viable social contract. I considered something proposing something more comprehensive (like the &lt;a href="https://www.rust-lang.org/policies/code-of-conduct"&gt;Rust Code of Conduct&lt;/a&gt;), but I felt that&amp;rsquo;s something for a &lt;em&gt;group&lt;/em&gt; of people to discuss and debate, should the time come where Irydium is more than a one-person show. For now, I&amp;rsquo;ll do my best to make sure that everyone in Irydium&amp;rsquo;s orbit has a good experience.&lt;/li&gt;
 &lt;li&gt;There&amp;rsquo;s a proper issues list, including some &amp;ldquo;good first bugs&amp;rdquo; for people to look at (shout out to &lt;a href="https://github.com/m-clare/"&gt;@m-clare&lt;/a&gt; for submitting the first PR to Irydium!)&lt;/li&gt;
 &lt;li&gt;We have a &lt;a href="https://gitter.im/irydium/community"&gt;channel on gitter&lt;/a&gt;, also accessible &lt;a href="https://matrix.to/#/#irydium_community:gitter.im"&gt;via Matrix&lt;/a&gt;. Come say hi!&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="next-steps"&gt;Next steps&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s not a ton of time left at RC, so some of these things may have to be done in my spare time after the batch ends. That said, here&amp;rsquo;s my near-term roadmap:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Add support for code chunks to output content directly to the DOM (currently the only way to output to an Irydium document is through a Svelte component). This will be particularly important for Python support, where people expect the output of a cell running &lt;a href="https://github.com/altair-viz"&gt;altair&lt;/a&gt; or &lt;a href="https://github.com/matplotlib/matplotlib/"&gt;matplotlib&lt;/a&gt; to display directly in the document (as they do in Jupyter). Tracked in &lt;a href="https://github.com/irydium/irydium/issues/122"&gt;irydium/irydium#122&lt;/a&gt;.&lt;/li&gt;
 &lt;li&gt;Integrate &lt;a href="https://ellx.io/"&gt;ellx.io&lt;/a&gt;&amp;rsquo;s next-generation JavaScript bundler, &lt;a href="https://github.com/dmaevsky/tokamak"&gt;tokamak&lt;/a&gt;. This should make building irydium documents much more robust and error proof and paves the way to further improvements. Special shout-out to the ellx developers for being so friendly and open to collaboration: ellx is a novel approach to application development and definitely worth checking out if you haven&amp;rsquo;t already. Tracked in &lt;a href="https://github.com/irydium/irydium/issues/125"&gt;irydium/irydium#125&lt;/a&gt;.&lt;/li&gt;
 &lt;li&gt;Finish and document support for language plugins (and make another blog post especially about them, they&amp;rsquo;re cool!). Tracked in &lt;a href="https://github.com/irydium/irydium/issues/144"&gt;irydium/irydium#144&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>10 years at Mozilla</title>
   <link>https://wrla.ch/blog/2021/07/10-years-at-mozilla/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2021-07-10-years-at-mozilla</guid>
   <pubDate>Mon, 12 Jul 2021 16:30:42 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Yesterday (July 11, 2021) was the 10 year anniversary of starting at the Mozilla Corporation. My life has changed a &lt;em&gt;ton&lt;/em&gt; in those years: in that time I ended a marriage, changed the city in which I live two times, and took up religion&lt;sup&gt;&lt;a href="#2021-07-12-10-years-at-mozilla-footnote-1-definition" name="2021-07-12-10-years-at-mozilla-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;. Mozilla has also changed pretty drastically in my time here, &lt;a href="https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/"&gt;especially in the last year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yet somehow I&amp;rsquo;m still at it, for more or less for the same reasons that led me to accept my initial offer to join the &lt;a href="https://wiki.mozilla.org/EngineeringProductivity"&gt;A-team&lt;/a&gt;.&lt;sup&gt;&lt;a href="#2021-07-12-10-years-at-mozilla-footnote-2-definition" name="2021-07-12-10-years-at-mozilla-footnote-2-return"&gt;2&lt;/a&gt;&lt;/sup&gt; The Internet has the immense potential to be a force for individual empowerment and yet more than ever, we see this technology used to consolidate unchecked power, spread misinformation, and generally exploit people. Mozilla is not perfect (no organization is: 10 years anywhere will teach you that), but it&amp;rsquo;s one of the few remaining counter-forces to these accelerating trends. While I&amp;rsquo;m currently taking a bit of a break to &lt;a href="https://wrla.ch/blog/2021/06/mini-sabbatical-and-introducing-irydium/"&gt;explore some stuff on my own&lt;/a&gt;, I am looking forward to getting back to work on &lt;a href="https://www.mozilla.org/en-CA/about/manifesto/"&gt;the mission&lt;/a&gt; when I return in mid-August.&lt;/p&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2021-07-12-10-years-at-mozilla-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;To the extent that Zen Buddhism is a religion.&amp;nbsp;&lt;a href="#2021-07-12-10-years-at-mozilla-footnote-1-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2021-07-12-10-years-at-mozilla-footnote-2-definition" class="footnote-definition"&gt;
   &lt;p&gt;I&amp;rsquo;ve since moved to &lt;a href="https://wiki.mozilla.org/Data"&gt;Data @ Mozilla&lt;/a&gt;&amp;nbsp;&lt;a href="#2021-07-12-10-years-at-mozilla-footnote-2-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description></item>
  <item>
   <title>Adding persistence to Irydium with Supabase</title>
   <link>https://wrla.ch/blog/2021/07/adding-persistence-to-irydium-with-supabase/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2021-07-adding-persistence-to-irydium-with-supabase</guid>
   <pubDate>Mon, 05 Jul 2021 15:09:56 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Entering the second week of &lt;a href="https://recurse.com"&gt;Recurse&lt;/a&gt;. Besides orientation and a few adventures in pair programming (special shout out to &lt;a href="http://universalities.com/"&gt;Jane Adams&lt;/a&gt; for trying out Irydium with me!), I spent most of my time attempting to get document saving &amp;amp; loading working with Irydium.&lt;/p&gt;

&lt;p&gt;I learned from &lt;a href="https://alpha.iodide.io"&gt;Iodide&lt;/a&gt; that not having a good document sharing story really inhibits collaboration and sharing, which is something I explicitly want to do here at the Recurse centre (and in general for this project). That said, this isn&amp;rsquo;t actually an area I want to spend a lot of time on right now: it&amp;rsquo;s the shape of problem I&amp;rsquo;ve solved many times before (and that has been solved by many others). I&amp;rsquo;d rather spend my time over the next few weeks on things I haven&amp;rsquo;t had much of a chance to look at or pursue in my day-to-day.&lt;/p&gt;

&lt;p&gt;So, to try to keep the complexity down, I decided to take the same approach as the &lt;a href="https://svelte.dev/repl"&gt;svelte repl&lt;/a&gt;, which aims only to allow the reproduction of simple examples. It allows you to save anything you type in it and also browse anything that you had previously saved. That&amp;rsquo;s not going to replace GitHub, but it&amp;rsquo;s more than enough to get started.&lt;/p&gt;

&lt;h2 id="supabase"&gt;Supabase&lt;/h2&gt;

&lt;p&gt;So with that goal in mind, how to do go about it? If I wanted to completely fall back on my previous knowledge, I could have gone for the tried + true approach of Django / Heroku to add a persistence layer (what I did for Iodide). That would have had the benefit of being familiar but would also have increased the overall implementation complexity of Irydium considerably. In the past year, I&amp;rsquo;ve become convinced that &lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;serverless&lt;/a&gt; approaches to building web applications are the wave of the future, at least for applications like this one. They&amp;rsquo;re easier to set up, easier to develop, and (generally speaking) cheaper to deploy. Just before I launched, I set up &lt;a href="https://irydium.dev"&gt;irydium.dev&lt;/a&gt; as a static site on &lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt; and it&amp;rsquo;s been a great experience: deploys are super fast and it&amp;rsquo;s easy to reason about what&amp;rsquo;s going on &amp;ldquo;under the hood&amp;rdquo; (since there&amp;rsquo;s not a much of a hood to look under).&lt;/p&gt;

&lt;p&gt;With that in mind, I decided to take a (small) gamble and give &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; a try for this one after determining it would be compatible with the approach I wanted to take. Supabase bills itself as a &amp;ldquo;Firebase Alternative&amp;rdquo; (&lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; is another popular solution for bootstrapping simple web applications with persistence). In contrast to Firebase, Supabase uses a standard database technologies (Postgres!) and has a nice JavaScript SDK and a bunch of well-written tutorials (including &lt;a href="https://supabase.io/docs/guides/with-svelte"&gt;one especially for Svelte&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The naive model for integrating with Supabase is pretty simple:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Set up a Supabase application, which provides you with a unique API endpoint to make web requests (this endpoint can be exposed publicly).&lt;/li&gt;
 &lt;li&gt;Have your client authenticate with an OAuth provider (e.g. GitHub, GitLab), then store an authentication token in localStorage.&lt;/li&gt;
 &lt;li&gt;You can then make requests to the above endpoint with the authentication token, which lets Supabase use row-level security to restrict modifications to the database: in this case, we can restrict users to updating their own documents.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;d say it probably took me 20&amp;ndash;30 hours to get the feature working end-to-end (including documentation), which wasn&amp;rsquo;t too bad. My impressions were pretty positive: the aforementioned tutorial is pretty decent, the supabase-js library provides a nice ORM-like abstraction over SQL and integrates nicely with Svelte. In general working with Supabase felt pretty familiar to me from previous experiences writing database-backed applications, which I take as a very good sign.&lt;/p&gt;

&lt;p&gt;The part that felt the weirdest was writing raw SQL to set up the &amp;ldquo;documents&amp;rdquo; table that Irydium uses: SQL is something I&amp;rsquo;m fairly used to writing because of my experiences at Mozilla, but I imagine this might be off-putting to someone newer to writing these types of things. Also, I have some concerns of how maintainable a Supabase database is over the long term: while it was easy enough to &lt;a href="https://github.com/irydium/irydium/blob/f816ea6444c94635972a57bc92d7770398117c1e/README.md#working-on-the-site"&gt;document the currently-simple setup instructions in the README&lt;/a&gt;, I do somewhat fear the prospect of managing my database via their SQL console. Something like Django&amp;rsquo;s &lt;a href="https://docs.djangoproject.com/en/3.2/topics/migrations/"&gt;schema migrations&lt;/a&gt; and &lt;a href="https://docs.djangoproject.com/en/3.2/howto/custom-management-commands/"&gt;management commands&lt;/a&gt; would be a welcome addition to Supabase&amp;rsquo;s SDK.&lt;/p&gt;

&lt;h2 id="netlify-functions"&gt;Netlify functions&lt;/h2&gt;

&lt;p&gt;The above approach isn&amp;rsquo;t what most people would consider to be &amp;ldquo;best practice&amp;rdquo;&lt;sup&gt;&lt;a href="#2021-07-05-adding-persistence-to-irydium-with-supabase-footnote-1-definition" name="2021-07-05-adding-persistence-to-irydium-with-supabase-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;. In particular, storing credentials in localStorage is probably not the best idea for an application presenting interactive content like Irydium: it wouldn&amp;rsquo;t be particularly difficult for a malicious document to steal someone&amp;rsquo;s secret and send it somewhere it shouldn&amp;rsquo;t be.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not &lt;em&gt;so&lt;/em&gt; worried about it at this stage of the project, but one intriguing possibility here (that&amp;rsquo;s compatible with our current deploy set up) would be to write some simple &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify Functions&lt;/a&gt; to do the actual interaction with Supabase, while delegating to Netlify for the authentication itself (using &lt;a href="https://docs.netlify.com/visitor-access/identity/"&gt;Netlify Identity&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I experimented writing a simple function to prove out this approach and it seems to work quite well (&lt;a href="https://github.com/irydium/irydium/blob/fecea66a1cd0bedaaab4a3e6502413c55d34ec11/packages/site/netlify_functions/post.js"&gt;source&lt;/a&gt;, &lt;a href="https://irydium.dev/.netlify/functions/post?id=65107940-dd88-11eb-866c-0a4e9a1089db"&gt;example&lt;/a&gt;). This particular function is making an anonymous query to the database, but I see no obstacle to handling authenticated ones as well. Having an API under a &lt;code&gt;.netlify&lt;/code&gt; namespace seems kinda weird on first blush, but I can probably get used to it.&lt;/p&gt;

&lt;p&gt;I want to move on to other things now (parsers! document state visualizations!) but might poke at this more later. In the mean time, if you write/build something cool at &lt;a href="https://irydium.dev/repl"&gt;irydium.dev/repl&lt;/a&gt;, let me know!&lt;/p&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2021-07-05-adding-persistence-to-irydium-with-supabase-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;See, for example, &lt;a href="https://dev.to/rdegges/please-stop-using-local-storage-1i04"&gt;Please Stop Using Local Storage&lt;/a&gt;&amp;nbsp;&lt;a href="#2021-07-05-adding-persistence-to-irydium-with-supabase-footnote-1-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description></item>
  <item>
   <title>Irydium: Points of departure</title>
   <link>https://wrla.ch/blog/2021/06/irydium-points-of-departure/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2021-06-irydium-points-of-departure</guid>
   <pubDate>Mon, 28 Jun 2021 16:28:40 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;So it&amp;rsquo;s my first day at the Recurse centre, which I &lt;a href="/blog/2021/06/mini-sabbatical-and-introducing-irydium/"&gt;blogged briefly about last week&lt;/a&gt;. I thought I&amp;rsquo;d start out by going into a bit more detail about what I&amp;rsquo;m trying to do with &lt;a href="https://github.com/irydium/irydium"&gt;Irydium&lt;/a&gt;. This post might be a bit discursive and some of my thoughts are only half-formed: my intent here is towards trying to &lt;em&gt;express some of these ideas at all&lt;/em&gt; rather than to come up with the perfect formulation for them, which is going to take time. It is based partly on a presentation I gave at Mozilla last Friday (just before going on my 6-week leave, which starts today).&lt;/p&gt;

&lt;h2 id="first-principles"&gt;First principles&lt;/h2&gt;

&lt;p&gt;The premise of Irydium is that despite obvious advances in terms of the ability of computers to crunch numbers and analyze data, our ability to share whatever we learn from these understandings is still far too difficult, especially for people new to the field. Even for domain experts (those with the job title &amp;ldquo;Data Engineer&amp;rdquo; or &amp;ldquo;Data Scientist&amp;rdquo; or similar) this is still more difficult than one would like.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve made a few observations over the past couple years of trying to explain and document Mozilla&amp;rsquo;s data platform that I think form a good starting point for trying to close the gap:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;em&gt;Text is pretty great&lt;/em&gt;.  Writing, just plain text, is (in my opinion) the single best medium for giving context to data.  In terms of raw information density and ability to communicate complex ideas, nothing beats it.  If you haven&amp;rsquo;t read it before, the essay &lt;a href="https://graydon2.dreamwidth.org/193447.html"&gt;always bet on text&lt;/a&gt; (by Graydon Hoare, creator of Rust) is well worth reading.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Markdown is pretty great too&lt;/em&gt;.  Essentially an easy-to-write superset of HTML, it&amp;rsquo;s become the medium of choice for many desktop publishing workflows and has become the basis for many efforts in the &amp;ldquo;interactive presentation&amp;rdquo; space that I&amp;rsquo;m most interested in.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Reactive Systems make Data Exposition Exposition Easier&lt;/em&gt;.  A reactive abstraction in front of your computational model reduces development times, makes your work more reproducible and is often easier for less-experienced people to understand.  I&amp;rsquo;d cite the long-standing success of Excel and the recent interest in projects like Observable as evidence for this.&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="ok-so-what-is-irydium"&gt;Ok, so what is Irydium?&lt;/h2&gt;

&lt;p&gt;Irydium is, at heart, a way to translate markdown documents into an interactive, compelling visual presentation.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/files/2021/06/irydium-2.png" alt="" /&gt;
 &lt;p class="caption"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;My view is that publishing markdown text on the web is very close to a solved problem, and that we should build on that success rather than invent something new. This is not necessarily a new point of view (e.g. &lt;a href="https://rmarkdown.rstudio.com/"&gt;Rmarkdown&lt;/a&gt; and &lt;a href="https://jupyterbook.org/"&gt;JupyterBook&lt;/a&gt; have similar premises) but I think some aspects of Irydium&amp;rsquo;s approach are mildly novel (or at least within the space of &amp;ldquo;not generally accepted ideas&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;If you want to get a bit of a flavor for how it works, visit the demonstration site (&lt;a href="https://irydium.dev"&gt;irydium.dev&lt;/a&gt;) and play with some of the examples.&lt;/p&gt;

&lt;h2 id="what-makes-irydium-different-from-x"&gt;What makes Irydium different from &amp;lt;X&amp;gt;?&lt;/h2&gt;

&lt;p&gt;While there are a bunch of related projects in this space, there&amp;rsquo;s a few design principles about Irydium that make it a little different from most of what&amp;rsquo;s already out there&lt;sup&gt;&lt;a href="#2021-06-28-irydium-points-of-departure-footnote-1-definition" name="2021-06-28-irydium-points-of-departure-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;em&gt;Reactive&lt;/em&gt;: Irydium is reactive in the same way that a spreadsheet is &amp;mdash; that is, any individual change you make will immediately flow to the rest of the system.  This provides a more intuitive model for the creator of the document and also makes it easier to create truly interactive visualizations.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Idempotent&lt;/em&gt;: in Irydium, a source document will yield the same presentation every time it&amp;rsquo;s run.  There&amp;rsquo;s no need to reason about what the state of the &amp;ldquo;kernel&amp;rdquo; is.  This is a highly valuable property when thinking about how to make your analyses reproducible.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Familiar&lt;/em&gt;: Irydium uses as few &lt;em&gt;novel&lt;/em&gt; concepts and technologies as possible: it builds on some of the best ideas and technologies produced by the open source community: &lt;a href="https://python.org"&gt;Python&lt;/a&gt;, &lt;a href="https://pyodide.org"&gt;pyodide&lt;/a&gt;, &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;, &lt;a href="https://mdsvex.com"&gt;mdsvex&lt;/a&gt;, &lt;a href="https://myst-parser.readthedocs.io/en/latest/"&gt;MyST&lt;/a&gt; and a few others &amp;mdash; chosen for having a reasonably shallow learning curve.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Hackable&lt;/em&gt;: While I&amp;rsquo;m working on an online environment to build and share irydium documents, it&amp;rsquo;s also fully possible to do so using the tools you know and love like Visual Studio Code.&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="related-projects"&gt;Related projects&lt;/h2&gt;

&lt;p&gt;With the above caveats, there are still a number of projects that overlap with Irydium&amp;rsquo;s ideas and/or design goals. A few that seem worth mentioning here:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://alpha.iodide.io"&gt;Iodide&lt;/a&gt;: This is the obvious one, at least for those who have been following my work for a while.  Iodide was an experiment in making a &amp;ldquo;web native&amp;rdquo; version of a scientific notebook: it uses the cell-based computational model that will be familiar to anyone who&amp;rsquo;s used Jupyter, but all the computation happens on the client.  It is probably most famous for launching &lt;a href="https://pyodide.org"&gt;pyodide&lt;/a&gt;, a port of Python to WebAssembly (that Irydium now uses to support Python).  I feel like it has a number of design issues (some of which I&amp;rsquo;ve &lt;a href="/blog/2020/11/iodide-retrospective/"&gt;blogged about previously&lt;/a&gt;) and is not currently in active development.&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://observablehq.com"&gt;Observable&lt;/a&gt;: Client-side reactive notebooks, commercial backing, broadly used in the D3 community.  Shares Irydium&amp;rsquo;s reactive approach, departs from it in terms of using a custom file format and emphasizing their interactive editing and collaboration environment (which is indeed quite impressive).  I&amp;rsquo;ve used Observable for a few small work things (&lt;a href="https://observablehq.com/@wlach/mozregression-public-usage-dashboard"&gt;example&lt;/a&gt;) and while there&amp;rsquo;s a lot I like about it, I am a bit non-plussed by how many wheels it reinvents and the implicit lock-in to a single vendor.&lt;sup&gt;&lt;a href="#2021-06-28-irydium-points-of-departure-footnote-2-definition" name="2021-06-28-irydium-points-of-departure-footnote-2-return"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://starboard.gg"&gt;Starboard&lt;/a&gt;: Similar in some ways to Iodide, but in active development.  I&amp;rsquo;ve started chatting a bit with the core developers on whether there might be areas we could collaborate.&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://ellx.io/"&gt;Ellx&lt;/a&gt;: I found out a bit about this relatively recently, via the Svelte discord.  Actually very close in some ways to Irydium in terms of choices of technology (e.g. &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;).  Again, in initial chats with the core developers on possible collaborations.&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="success-criteria"&gt;Success criteria&lt;/h2&gt;

&lt;p&gt;My intent with Irydium, at this point in its development, is to prove out some concepts and see where they lead. While I&amp;rsquo;d welcome it if Irydium became a successful, widely adopted environment for building interactive data visualizations, I&amp;rsquo;d also be totally happy with other outcomes, such as:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;Providing a source of ideas and/or code for other people.&lt;/li&gt;
 &lt;li&gt;Working on (or with) Irydium being a good learning experience both for myself and others&lt;/li&gt;&lt;/ol&gt;

&lt;hr /&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2021-06-28-irydium-points-of-departure-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;Please don&amp;rsquo;t conflate &amp;ldquo;unique&amp;rdquo; with &amp;ldquo;superior&amp;rdquo;: I&amp;rsquo;m well aware that all designs come with trade offs. In particular, Irydium&amp;rsquo;s approach will almost certainly make it difficult / impossible to directly interact with &amp;ldquo;big data&amp;rdquo; systems in an efficient way.&amp;nbsp;&lt;a href="#2021-06-28-irydium-points-of-departure-footnote-1-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2021-06-28-irydium-points-of-departure-footnote-2-definition" class="footnote-definition"&gt;
   &lt;p&gt;There is at least one effort (&lt;a href="https://github.com/asg017/dataflow"&gt;Dataflow&lt;/a&gt;) to allow editing Observable documents without using Observable itself, which is interesting.&amp;nbsp;&lt;a href="#2021-06-28-irydium-points-of-departure-footnote-2-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description></item>
  <item>
   <title>Mini-sabbatical and introducing Irydium</title>
   <link>https://wrla.ch/blog/2021/06/mini-sabbatical-and-introducing-irydium/?utm_source=Recurse&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wrla-ch:-blog-2021-06-mini-sabbatical-and-introducing-irydium</guid>
   <pubDate>Wed, 23 Jun 2021 21:15:15 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Approaching my 10-year moz-iversary in July, I&amp;rsquo;ve decided it&amp;rsquo;s time to take a bit of a mini-sabbatical: I&amp;rsquo;ll be out (and trying as hard as possible not to check bugmail) from Friday, June 25th until August 9th. During this time, I&amp;rsquo;ll be doing a batch at the &lt;a href="https://recurse.com"&gt;Recurse Centre&lt;/a&gt; (something like a writer&amp;rsquo;s retreat for programmers), exploring some of my interests around data visualization and analysis that don&amp;rsquo;t quite fit into my role as a Data Engineer here at Mozilla.&lt;/p&gt;

&lt;p&gt;In particular, I&amp;rsquo;m planning to work a bunch on a project tentatively called &amp;ldquo;Irydium&amp;rdquo;, which pursues some of the ideas I &lt;a href="https://wrla.ch/blog/2020/11/iodide-retrospective/"&gt;sketched out last year in my Iodide retrospective&lt;/a&gt; and a few more besides. I&amp;rsquo;ve been steadily working on it in my off hours, but it&amp;rsquo;s become clear that some of the things I want to pursue would benefit from more dedicated attention and the broader perspective that I&amp;rsquo;m hoping the Recurse community will be able to provide.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/files/2021/06/irydium.png" alt="" /&gt;
 &lt;p class="caption"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;I had meant to write up a proper blog post to announce the project before I left, but it looks like I&amp;rsquo;m pretty much out of time. Instead, I&amp;rsquo;ll just offer up the examples on the newly-minted &lt;a href="https://irydium.dev"&gt;irydium.dev&lt;/a&gt; and invite people to contact me if any of the ideas on the site sounds interesting. I&amp;rsquo;m hoping to blog a whole bunch while I&amp;rsquo;m there, but probably not under the Mozilla tag. Feel free to add wrla.ch to your RSS feed if you want to follow what I&amp;rsquo;m up to!&lt;/p&gt;</description></item></channel></rss>